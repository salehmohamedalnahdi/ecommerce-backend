// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id    Int     @id @default(autoincrement())
  title  String
  content String  
  createdAt  DateTime @default(now())
}
 //tasks
model Tasks {
  id    Int     @id @default(autoincrement())
  title  String
  isDone Boolean  @default(false)
}
//jobReasearch
model Job {
  id        Int     @id @default(autoincrement())
  title     String
  content   String  
  city      String
  cat       String
  createdAt DateTime @default(now())
  applyers Applyer [] 
}

model Applyer {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique 
  createdAt  DateTime   @default(now())
  applyer    Job        @relation(fields: [appler_id],references: [id],onDelete: Cascade)
  appler_id  Int
  cv         String ?
}

//ecomrce
model Product {
  id            Int          @id @default(autoincrement())
  name          String
  desc          String?  
  price         Float
  cat           String
  image         String?
  createdAt     DateTime      @default(now())
  interactions  Interaction[]
  pro_carts     Pro_cart[]     @relation("product")
}

model Interaction {
  id               String     @id @default(uuid())
  comment          String
  rate             Int  
  createdAt        DateTime   @default(now())
  products         Product    @relation(fields: [interactionId],references: [id],onDelete: Cascade)
  interactionId    Int
}
model Pro_cart {
  id           Int          @id @default(autoincrement())
  qu           Int          @default(1)
  products     Product[]    @relation("product")
  carts         Cart?       @relation("cart",fields: [cartId],references: [id],onDelete: Cascade)
  cartId        Int?
}
model Cart {
  id           Int         @id @default(autoincrement())
  pro_carts     Pro_cart[] @relation("cart")
 
}
